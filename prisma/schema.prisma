// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELED
  REFUNDED
  EXPIRED
  CHARGEBACK
}

model Users {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  is_admin   Boolean  @default(false)
  created_at DateTime @default(now())

  PasswordRecovery PasswordRecoveries[]
}

model PasswordRecoveries {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    Int      @unique
  token     String   @unique

  User Users @relation(fields: [userId], references: [id])
}

model RevokedTokens {
  id    Int    @id @default(autoincrement())
  token String @unique
}

model Logs {
  id        Int      @id @default(autoincrement())
  ip        String
  path      String
  method    String
  createdAt DateTime @default(now())
}

model Products {
  id           Int             @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  name         String
  description  String
  price        Int
  stock        Int
  discounts    Discounts[]
  images       ProductImages[]
  transactions Transactions[]
  reviews      Reviews[]
}

model Discounts {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  value      Int
  productId  Int
  expiresAt  DateTime
  product    Products  @relation(fields: [productId], references: [id])
}

model ProductImages {
  id         Int       @id @default(autoincrement())
  productId  Int
  url        String
  product    Products  @relation(fields: [productId], references: [id])
}

model Transactions {
  id         Int       @id @default(autoincrement())
  productId  Int
  userId     Int
  price      Int
  createdAt  DateTime  @default(now())
  expiresAt DateTime
  status     String @default("PENDING")
  product    Products  @relation(fields: [productId], references: [id])
}

model Reviews {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  userId     Int
  productId  Int
  title      String
  content    String
  rating     Int
  approved   Boolean @default(false)
  product    Products  @relation(fields: [productId], references: [id])
}

